generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([id, providerId, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String        @id @unique @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  projects      ProjectUser[]
  taskGroup     taskGroup[]
  Task          Task[]
}

model VerificationRequest {
  id         String   @id @unique @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

//tabla intermediaria que gestiona la relacion muchos a muchos entre usuarios y proyectos
model ProjectUser {
  id         String  @id @unique @default(cuid())
  //user_id
  user_id    String
  //project_id
  project_id String
  //rol
  role       Role    @default(READER)
  //relaciones 
  user       User    @relation(fields: [user_id], references: [id])
  project    Project @relation(fields: [project_id], references: [id])
}

/// user role

enum Role {
  ADMIN /// allowed to do everything
  EDITOR /// allowed to edit content
  READER /// allowed to read content
}

model Project {
  id          String        @id @unique @default(cuid())
  members     ProjectUser[]
  name        String        @db.VarChar(80)
  description String?       @db.VarChar(1000)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  taskGroup   taskGroup[]
}

model taskGroup {
  id          String   @id @unique @default(cuid())
  project_id  String
  project     Project  @relation(fields: [project_id], references: [id])
  author_id   String
  author      User     @relation(fields: [author_id], references: [id])
  task        Task[]
  name        String   @db.VarChar(80)
  description String?  @db.VarChar(1500)
  status      String   @db.VarChar(18)
  progress    String   @db.VarChar(18)
  criticality String   @db.VarChar(18)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @db.Timestamptz(6)
  endsAt      DateTime @default(now()) @db.Timestamptz(6)
}

model Task {
  id           String    @id @unique @default(cuid())
  taskGroup_id String
  taskGroup    taskGroup @relation(fields: [taskGroup_id], references: [id])
  author_id    String
  author       User      @relation(fields: [author_id], references: [id])
  name         String    @db.VarChar(80)
  description  String?   @db.VarChar(1200)
  status       String    @db.VarChar(18)
  progress     Int
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @db.Timestamptz(6)
  endsAt       DateTime  @default(now()) @db.Timestamptz(6)
}
