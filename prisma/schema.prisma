generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING") //! use a direct connection only use in production
}

model User {
  id                    String                 @id @unique @default(cuid())
  name                  String?                @db.VarChar(35)
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  accounts              Account[]
  projects              UsersOnProjects[]      @relation("userProjects")
  currentProjectId      String?
  currentProject        UsersOnProjects?       @relation("currentProject", fields: [currentProjectId], references: [id])
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @unique @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model InviteToken {
  id         String   @id @unique @default(cuid())
  project_id String
  project    Project  @relation(fields: [project_id], references: [id])
  email      String   @unique //probar luego el error que da cuando ya existe una invitacion con el mismo email para devolver algo en la vista
  role       Role
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

enum Role {
  OWNER /// allowed to do everything
  ADMIN /// allowed to manage users under, and delete taskgroups and tasks
  EDITOR /// allowed to edit content, but not delete
  VIEWER /// allowed to read content
}

//tabla intermediaria que gestiona la relacion muchos a muchos entre usuarios y proyectos
model UsersOnProjects {
  id                String      @id @unique @default(cuid())
  user_id           String
  project_id        String
  createdAt         DateTime    @default(now()) @db.Timestamptz
  role              Role        @default(VIEWER)
  user              User        @relation(name: "userProjects", fields: [user_id], references: [id], onDelete: Cascade)
  project           Project     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  currentUsers      User[]      @relation("currentProject")
  assignedTaskGroup TaskGroup[] // relation m-m inplicit
}

model Project {
  id          String            @id @unique @default(cuid())
  members     UsersOnProjects[]
  name        String            @db.VarChar(28)
  description String?           @db.VarChar(4000)
  createdAt   DateTime          @default(now()) @db.Timestamptz
  taskGroup   TaskGroup[]
  Invitation  InviteToken[]
}

enum Criticality {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  PAUSED
  PENDING
  IN_PROGRESS
  COMPLETED
}

model TaskGroup {
  id              String            @id @unique @default(cuid())
  project_id      String
  project         Project           @relation(fields: [project_id], references: [id], onDelete: Cascade)
  membersAssigned UsersOnProjects[] // relation m-m implicit
  task            Task[]
  name            String            @db.VarChar(45)
  description     String?           @db.VarChar(1200)
  status          Status            @default(PENDING)
  criticality     Criticality
  createdAt       DateTime          @default(now()) @db.Timestamptz
  updatedAt       DateTime?         @updatedAt @db.Timestamptz
  startAt         DateTime?         @db.Timestamptz
  endAt           DateTime?         @db.Timestamptz
}

model Task {
  id            String    @id @unique @default(cuid())
  task_group_id String
  taskGroup     TaskGroup @relation(fields: [task_group_id], references: [id], onDelete: Cascade)
  name          String    @db.VarChar(80)
  description   String?   @db.VarChar(4000)
  status        Status    @default(PENDING)
  progress      Int       @default(0)
  createdAt     DateTime  @default(now()) @db.Timestamptz
  updatedAt     DateTime? @updatedAt @db.Timestamptz
}
